//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
//
//     Manual changes to this file may cause unexpected behavior in your application.
//     Manual changes to this file will be overwritten if the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace Clinic_App.Model
{
    using System;
    using System.Data.Entity;
    using System.Data.Entity.Infrastructure;
    using System.Data.Entity.Core.Objects;
    using System.Linq;
    
    public partial class DB_ClinicEntities : DbContext
    {
        public DB_ClinicEntities()
            : base("name=DB_ClinicEntities")
        {
        }
    
        protected override void OnModelCreating(DbModelBuilder modelBuilder)
        {
            throw new UnintentionalCodeFirstException();
        }
    
        public virtual DbSet<sysdiagram> sysdiagrams { get; set; }
        public virtual DbSet<Tbl_Doctor> Tbl_Doctor { get; set; }
        public virtual DbSet<Tbl_Pat_Images> Tbl_Pat_Images { get; set; }
        public virtual DbSet<Tbl_Patient> Tbl_Patient { get; set; }
        public virtual DbSet<Tbl_Reception> Tbl_Reception { get; set; }
        public virtual DbSet<Tbl_Role> Tbl_Role { get; set; }
        public virtual DbSet<Tbl_Section> Tbl_Section { get; set; }
        public virtual DbSet<Tbl_Service> Tbl_Service { get; set; }
        public virtual DbSet<Tbl_User> Tbl_User { get; set; }
        public virtual DbSet<Vw_Dr> Vw_Dr { get; set; }
        public virtual DbSet<Vw_Pat> Vw_Pat { get; set; }
        public virtual DbSet<Vw_PatientWithImages> Vw_PatientWithImages { get; set; }
        public virtual DbSet<Vw_Reception> Vw_Reception { get; set; }
        public virtual DbSet<Vw_Sec> Vw_Sec { get; set; }
        public virtual DbSet<Vw_Ser> Vw_Ser { get; set; }
        public virtual DbSet<vw_VisitTime> vw_VisitTime { get; set; }
    
        public virtual int sp_alterdiagram(string diagramname, Nullable<int> owner_id, Nullable<int> version, byte[] definition)
        {
            var diagramnameParameter = diagramname != null ?
                new ObjectParameter("diagramname", diagramname) :
                new ObjectParameter("diagramname", typeof(string));
    
            var owner_idParameter = owner_id.HasValue ?
                new ObjectParameter("owner_id", owner_id) :
                new ObjectParameter("owner_id", typeof(int));
    
            var versionParameter = version.HasValue ?
                new ObjectParameter("version", version) :
                new ObjectParameter("version", typeof(int));
    
            var definitionParameter = definition != null ?
                new ObjectParameter("definition", definition) :
                new ObjectParameter("definition", typeof(byte[]));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_alterdiagram", diagramnameParameter, owner_idParameter, versionParameter, definitionParameter);
        }
    
        public virtual int sp_creatediagram(string diagramname, Nullable<int> owner_id, Nullable<int> version, byte[] definition)
        {
            var diagramnameParameter = diagramname != null ?
                new ObjectParameter("diagramname", diagramname) :
                new ObjectParameter("diagramname", typeof(string));
    
            var owner_idParameter = owner_id.HasValue ?
                new ObjectParameter("owner_id", owner_id) :
                new ObjectParameter("owner_id", typeof(int));
    
            var versionParameter = version.HasValue ?
                new ObjectParameter("version", version) :
                new ObjectParameter("version", typeof(int));
    
            var definitionParameter = definition != null ?
                new ObjectParameter("definition", definition) :
                new ObjectParameter("definition", typeof(byte[]));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_creatediagram", diagramnameParameter, owner_idParameter, versionParameter, definitionParameter);
        }
    
        public virtual int SP_Del_Recep_By_PatID(Nullable<int> pATID)
        {
            var pATIDParameter = pATID.HasValue ?
                new ObjectParameter("PATID", pATID) :
                new ObjectParameter("PATID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("SP_Del_Recep_By_PatID", pATIDParameter);
        }
    
        public virtual int sp_dropdiagram(string diagramname, Nullable<int> owner_id)
        {
            var diagramnameParameter = diagramname != null ?
                new ObjectParameter("diagramname", diagramname) :
                new ObjectParameter("diagramname", typeof(string));
    
            var owner_idParameter = owner_id.HasValue ?
                new ObjectParameter("owner_id", owner_id) :
                new ObjectParameter("owner_id", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_dropdiagram", diagramnameParameter, owner_idParameter);
        }
    
        public virtual ObjectResult<SP_FindLast_Result3> SP_FindLast()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SP_FindLast_Result3>("SP_FindLast");
        }
    
        public virtual ObjectResult<sp_helpdiagramdefinition_Result1> sp_helpdiagramdefinition(string diagramname, Nullable<int> owner_id)
        {
            var diagramnameParameter = diagramname != null ?
                new ObjectParameter("diagramname", diagramname) :
                new ObjectParameter("diagramname", typeof(string));
    
            var owner_idParameter = owner_id.HasValue ?
                new ObjectParameter("owner_id", owner_id) :
                new ObjectParameter("owner_id", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_helpdiagramdefinition_Result1>("sp_helpdiagramdefinition", diagramnameParameter, owner_idParameter);
        }
    
        public virtual ObjectResult<sp_helpdiagrams_Result1> sp_helpdiagrams(string diagramname, Nullable<int> owner_id)
        {
            var diagramnameParameter = diagramname != null ?
                new ObjectParameter("diagramname", diagramname) :
                new ObjectParameter("diagramname", typeof(string));
    
            var owner_idParameter = owner_id.HasValue ?
                new ObjectParameter("owner_id", owner_id) :
                new ObjectParameter("owner_id", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_helpdiagrams_Result1>("sp_helpdiagrams", diagramnameParameter, owner_idParameter);
        }
    
        public virtual int sp_renamediagram(string diagramname, Nullable<int> owner_id, string new_diagramname)
        {
            var diagramnameParameter = diagramname != null ?
                new ObjectParameter("diagramname", diagramname) :
                new ObjectParameter("diagramname", typeof(string));
    
            var owner_idParameter = owner_id.HasValue ?
                new ObjectParameter("owner_id", owner_id) :
                new ObjectParameter("owner_id", typeof(int));
    
            var new_diagramnameParameter = new_diagramname != null ?
                new ObjectParameter("new_diagramname", new_diagramname) :
                new ObjectParameter("new_diagramname", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_renamediagram", diagramnameParameter, owner_idParameter, new_diagramnameParameter);
        }
    
        public virtual ObjectResult<Nullable<int>> SP_SelectAndCount_Pat_Images(Nullable<int> iDPAT_Input)
        {
            var iDPAT_InputParameter = iDPAT_Input.HasValue ?
                new ObjectParameter("IDPAT_Input", iDPAT_Input) :
                new ObjectParameter("IDPAT_Input", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<int>>("SP_SelectAndCount_Pat_Images", iDPAT_InputParameter);
        }
    
        public virtual ObjectResult<Nullable<int>> SP_SelectDrIDBy_Codes(string dR_MOBILE, string dR_NCODE, string dR_MedicalCode)
        {
            var dR_MOBILEParameter = dR_MOBILE != null ?
                new ObjectParameter("DR_MOBILE", dR_MOBILE) :
                new ObjectParameter("DR_MOBILE", typeof(string));
    
            var dR_NCODEParameter = dR_NCODE != null ?
                new ObjectParameter("DR_NCODE", dR_NCODE) :
                new ObjectParameter("DR_NCODE", typeof(string));
    
            var dR_MedicalCodeParameter = dR_MedicalCode != null ?
                new ObjectParameter("DR_MedicalCode", dR_MedicalCode) :
                new ObjectParameter("DR_MedicalCode", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<int>>("SP_SelectDrIDBy_Codes", dR_MOBILEParameter, dR_NCODEParameter, dR_MedicalCodeParameter);
        }
    
        public virtual ObjectResult<Nullable<int>> SP_SelectDrIDByName(string dR_NAME)
        {
            var dR_NAMEParameter = dR_NAME != null ?
                new ObjectParameter("DR_NAME", dR_NAME) :
                new ObjectParameter("DR_NAME", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<int>>("SP_SelectDrIDByName", dR_NAMEParameter);
        }
    
        public virtual int SP_Update_TblPatient_ColImgCoutn(Nullable<int> pATID)
        {
            var pATIDParameter = pATID.HasValue ?
                new ObjectParameter("PATID", pATID) :
                new ObjectParameter("PATID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("SP_Update_TblPatient_ColImgCoutn", pATIDParameter);
        }
    
        public virtual int sp_upgraddiagrams()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_upgraddiagrams");
        }
    
        public virtual ObjectResult<SP_GetPatImages_Result4> SP_GetPatImages(Nullable<int> pATID)
        {
            var pATIDParameter = pATID.HasValue ?
                new ObjectParameter("PATID", pATID) :
                new ObjectParameter("PATID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SP_GetPatImages_Result4>("SP_GetPatImages", pATIDParameter);
        }
    
        public virtual ObjectResult<SP_Del_All_OF_PatImage_Result> SP_Del_All_OF_PatImage(Nullable<int> pATID)
        {
            var pATIDParameter = pATID.HasValue ?
                new ObjectParameter("PATID", pATID) :
                new ObjectParameter("PATID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SP_Del_All_OF_PatImage_Result>("SP_Del_All_OF_PatImage", pATIDParameter);
        }
    
        public virtual int SP_Del_One_OF_PatImage(Nullable<int> img_ID)
        {
            var img_IDParameter = img_ID.HasValue ?
                new ObjectParameter("Img_ID", img_ID) :
                new ObjectParameter("Img_ID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("SP_Del_One_OF_PatImage", img_IDParameter);
        }
    }
}
